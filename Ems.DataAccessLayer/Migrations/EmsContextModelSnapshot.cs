// <auto-generated />
using System;
using Ems.DataAccessLayer.EntityFrameworkCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ems.DataAccessLayer.Migrations
{
    [DbContext(typeof(EmsContext))]
    partial class EmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ems.Entity.Accounds.RegisterStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("RegisterStatus");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Role");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedId");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 348, DateTimeKind.Utc).AddTicks(9670),
                            CreatedId = 1,
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 348, DateTimeKind.Utc).AddTicks(9675),
                            UpdatedId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 348, DateTimeKind.Utc).AddTicks(9682),
                            CreatedId = 1,
                            RoleName = "Agentlik",
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 348, DateTimeKind.Utc).AddTicks(9683),
                            UpdatedId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 348, DateTimeKind.Utc).AddTicks(9685),
                            CreatedId = 1,
                            RoleName = "Ev Sahibi",
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 348, DateTimeKind.Utc).AddTicks(9686),
                            UpdatedId = 1
                        });
                });

            modelBuilder.Entity("Ems.Entity.Accounds.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Email");

                    b.Property<string>("PassworHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConfirmCode")
                        .HasColumnType("int")
                        .HasColumnName("ConfirmCode");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsConfirmPassword")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Ems.Entity.Commons.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedId");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.HasIndex("UserId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Ems.Entity.Estates.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Category Name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedId");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Yeni tikili",
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2218),
                            CreatedId = 1,
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2223),
                            UpdatedId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Köhnə tikili",
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2231),
                            CreatedId = 1,
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2232),
                            UpdatedId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Həyət evi",
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2234),
                            CreatedId = 1,
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2235),
                            UpdatedId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Ofis",
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2237),
                            CreatedId = 1,
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2238),
                            UpdatedId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Obyekt",
                            CreatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2241),
                            CreatedId = 1,
                            UpdatedDate = new DateTime(2024, 9, 10, 8, 31, 41, 357, DateTimeKind.Utc).AddTicks(2242),
                            UpdatedId = 1
                        });
                });

            modelBuilder.Entity("Ems.Entity.Estates.Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<int>("Area")
                        .HasColumnType("int")
                        .HasColumnName("Area");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedId");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.UserDetail", b =>
                {
                    b.HasOne("Ems.Entity.Accounds.RegisterStatus", "Status")
                        .WithMany("UserDetails")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ems.Entity.Accounds.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Ems.Entity.Accounds.UserDetail", "UserId");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.UserRole", b =>
                {
                    b.HasOne("Ems.Entity.Accounds.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ems.Entity.Accounds.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ems.Entity.Commons.UploadedFile", b =>
                {
                    b.HasOne("Ems.Entity.Estates.Estate", null)
                        .WithMany("UploadedFiles")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ems.Entity.Accounds.User", null)
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ems.Entity.Estates.Estate", b =>
                {
                    b.HasOne("Ems.Entity.Estates.Category", "Category")
                        .WithMany("Estates")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ems.Entity.Accounds.User", "Users")
                        .WithMany("Estates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.RegisterStatus", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Ems.Entity.Accounds.User", b =>
                {
                    b.Navigation("Estates");

                    b.Navigation("UploadedFiles");

                    b.Navigation("UserDetail");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Ems.Entity.Estates.Category", b =>
                {
                    b.Navigation("Estates");
                });

            modelBuilder.Entity("Ems.Entity.Estates.Estate", b =>
                {
                    b.Navigation("UploadedFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
